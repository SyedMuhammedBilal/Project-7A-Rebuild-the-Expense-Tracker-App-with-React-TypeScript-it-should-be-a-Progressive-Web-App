{"version":3,"sources":["components/Headers.tsx","context/AppReducer.tsx","context/GlobalState.tsx","components/Balance.tsx","components/IncomeExpenses.tsx","components/Transaction.tsx","components/TransactionsList.tsx","components/AddTransaction.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Headers","data-testid","style","fontSize","state","action","type","transactions","filter","t","id","transaction","startingState","title","amount","deleteTransaction","addTransaction","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","Balance","balance","useContext","map","reduce","a","b","className","IncomeExpenses","transactionAmounts","income","i","expense","Transaction","sign","Math","abs","onClick","TransactionsList","key","AddTransaction","useState","setTitle","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","Number","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a4e3e8d6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Headers() {\n    return(\n        <div data-testid=\"heading\" style={{ fontSize: '20px' }}>\n            Expense Tracker\n        </div>\n    )\n}\n\nexport default Headers;","import { TransactionType } from \"../Types\";\n\ntype Actions = \n| {type: \"add\", transaction: TransactionType}\n| {type: \"delete\", id: number}\n\nexport default (state: { transactions: TransactionType[]; }, action: Actions ) => {\n    switch(action.type) {\n        case 'delete':\n            return {\n                transactions: state.transactions.filter(t => t.id !== action.id)\n            }\n        case 'add':\n            return {\n                ...state,\n                transactions: [action.transaction, ...state.transactions]\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from 'react'\nimport AppReducer from './AppReducer'\nimport {TransactionType} from '../Types'\n\nconst startingState = {\n    transactions : [\n        {id:1, title:\"IPhone\", amount:450}\n    ],\n    deleteTransaction : (id: number) => {},\n    addTransaction : (transaction: TransactionType) => {}\n\n}\n\nexport const GlobalContext = createContext(startingState);\n\nexport const GlobalProvider : React.FC = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, startingState);\n\n    // Actions (will be sent to reducer)\n    function deleteTransaction(id: number) {\n      dispatch({\n        type: 'delete',\n        id\n      })\n    }\n\n    function addTransaction(transaction: TransactionType) {\n      dispatch({\n        type: 'add',\n        transaction\n      })\n    }\n\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n      }}>\n        {children}\n      </GlobalContext.Provider>);\n\n}","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const Balance = () => {\n    const { transactions } = useContext(GlobalContext);\n    const transactionAmounts = transactions.map(transaction => transaction.amount);\n    const balance = transactionAmounts.reduce((a, b) => (a + b), 0);\n\n    return (\n        <div className=\"balance\" >\n            <h4>Balance:</h4>\n            <h1 data-testid=\"blnc\">${balance}</h1>\n        </div>\n    )\n}\n\nexport default Balance;","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const IncomeExpenses = () => {\n    const { transactions } = useContext(GlobalContext);\n    const transactionAmounts = transactions.map(transaction => transaction.amount);\n    const income = transactionAmounts.filter(i => i>0).reduce((a, b) => (a+b), 0);\n    const expense = -transactionAmounts.filter(i => i<0).reduce((a, b) => (a+b), 0);\n    \n    return (\n        <div>\n            <div className=\"inc-exp-container\">\n                <div>\n                    <h4>Income</h4>\n                    <p data-testid=\"income\" className=\"money plus\">${income}</p>\n                </div>\n                <div>\n                    <h4>Expense</h4>\n                    <p data-testid=\"expense\" className=\"money minus\">${expense}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default IncomeExpenses;","import React, { useContext } from 'react';\n\nimport { GlobalContext } from '../context/GlobalState'\nimport { TransactionType } from '../Types';\n\n\nconst Transaction: React.FC<TransactionType> = ({ id, title, amount }) => {\n    const { deleteTransaction } = useContext(GlobalContext);\n\n    const sign = amount > 0 ? '+' : '-';\n    \n    return (\n        <div>\n            <li className={amount > 0 ? 'plus' : 'minus'}>\n                {title}<span>{sign}${Math.abs(amount)}</span>\n                <button onClick={() => deleteTransaction(id)} className=\"delete-btn\">x</button>\n            </li>\n        </div>\n    );\n};\n\nexport default Transaction; ","import React, { useContext } from 'react';\nimport Transaction from './Transaction'\n\nimport { GlobalContext } from '../context/GlobalState'\n\n function TransactionsList() {\n    const { transactions } = useContext(GlobalContext);\n\n    return (\n        <div>\n            <h3>History</h3>\n            <ul data-testid=\"list\" className=\"list\">\n            {transactions.map(transaction => (<Transaction key={transaction.id}\n            id={transaction.id}\n            title={transaction.title}\n            amount={transaction.amount} />))}    \n            </ul>\n        </div>\n    )\n}\n\nexport default TransactionsList;","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst AddTransaction = () => {\n    const [title, setTitle] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const { addTransaction } = useContext(GlobalContext);\n    \n  const onSubmit = (e: { preventDefault: () => void;}) => {\n        e.preventDefault();\n        const newTransaction = {\n            id: Math.floor(Math.random() * 100000000),\n            title,\n            amount: +amount\n        };\n        addTransaction(newTransaction);\n    };\n    \n  return (\n        <>\n            <h3>Add new transaction</h3>\n            <form onSubmit={onSubmit} data-testid=\"transaction-form\">\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\">Text</label>\n                  <input\n                      type=\"text\"\n                      value={title}\n                      data-testid=\"name\"\n                      onChange={e => setTitle(e.target.value)}\n                      placeholder=\"Enter text...\" />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"amount\">\n                        Amount <br />\n                        (negative - expense, positive - income)\n                    </label>\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        onChange={e => setAmount(Number(e.target.value))}\n                        data-testid=\"amount\"\n                        placeholder=\"Enter amount...\"\n                    />\n                </div>\n                <button className=\"btn\">Add transaction</button>\n            </form>\n        </>\n    );\n}\n\nexport default AddTransaction;\n","import React from 'react';\nimport './App.css';\nimport Headers from './components/Headers'\nimport Balance from './components/Balance';\nimport Income from './components/IncomeExpenses';\nimport TransactionsList from './components/TransactionsList';\nimport AddTransaction from './components/AddTransaction'\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Headers />\n      <div className=\"container\">\n        <Balance />\n        <Income />\n        <TransactionsList />\n        <AddTransaction />\n      </div> \n    </GlobalProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}